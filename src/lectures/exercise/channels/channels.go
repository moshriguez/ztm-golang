//--Summary:
//  Create a program that utilizes goroutines to run the provided calculation
//  function on a number of jobs. The results from the goroutines must be
//  communicated back to the main thread using a channel, and then added
//  together.
//
//--Requirements:
//* Run `longCalculation` for each job generated by the `makeJobs` function
//* Each job must be run in a separate goroutine
//* The result from `longCalculation` must be provided to the main function
//  using a channel
//* Sum the results from each job to generate a final result, and print it
//  to the terminal

package main

import "fmt"
import "time"
import "math/rand"

type Job int

func longCalculation(i Job) int {
	duration := time.Duration(rand.Intn(1000)) * time.Millisecond
	time.Sleep(duration)
	fmt.Printf("Job %d complete in %v\n", i, duration)
	return int(i) * 30
}

func makeJobs(deterministic bool) []Job {
	jobs := make([]Job, 0, 100)
	for i := 0; i < 100; i++ {
		if deterministic {
			jobs = append(jobs, Job(i))
		} else {
			jobs = append(jobs, Job(rand.Intn(10000)))
		}
	}
	return jobs
}

func main() {
	rand.Seed(time.Now().UnixNano())
	sumIsDeterministic := false
	jobs := makeJobs(sumIsDeterministic)

	sum := 0
	results := make(chan int, 100)
	for _, job := range jobs {
		go func(resultchan chan int, job Job) {
			resultchan <- longCalculation(job)
		}(results, job)
	}
	correctAns := TestAnswer()

	// no response for x amount of time approach
	// for {
	// 	select {
	// 	case result := <-results:
	// 		sum += result
	// 	case <-time.After(2 * time.Second):
	// 		if sum == correctAns {
	// 			fmt.Println("Correct")
	// 			fmt.Println("Total:", sum)
	// 		} else if sumIsDeterministic {
	// 			fmt.Println("Sorry. That's not right.")
	// 			fmt.Println("Total:", sum)
	// 		} else {
	// 			fmt.Println("Total:", sum)
	// 		}
	// 		return
	// 	}
	// }

	// count the number of results approach
	i := 0
	for i < len(jobs) {
		result := <-results
		sum += result
		i++
	}
	if sum == correctAns {
		fmt.Println("Correct")
		fmt.Println("Total:", sum)
	} else if sumIsDeterministic {
		fmt.Println("Sorry. That's not right.")
		fmt.Println("Total:", sum)
	} else {
		fmt.Println("Total:", sum)
	}

}

func TestAnswer() int {
	ans := 0
	for i := 0; i < 100; i++ {
		ans += i * 30
	}
	return ans
}
